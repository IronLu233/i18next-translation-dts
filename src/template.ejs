<%
  const { inlinePaths, translationFilePaths, global, strict } = locals;
%>
<% if(inlinePaths && inlinePaths.length > 0) {%>
<%- `type ${global} = ${inlinePaths.map(it => `'${it}'`).join(' | ')}` %>
<% } else { %>

type TranslationPaths<T, Prefix extends string = ""> = keyof {
  [K in keyof T as K extends string
    ? K extends keyof {
        [K in keyof T as T[K] extends string
          ? K extends string
            ? K
            : never
          : never]: never;
      }
      ? Prefix extends ""
        ? K
        : `${Prefix}.${K}`
      : K extends keyof {
          [K in keyof T as T[K] extends Record<any, any> ? K : never]: never;
        }
      ? Prefix extends ""
        ? TranslationPaths<T[K], K>
        : TranslationPaths<T[K], `${Prefix}.${K}`>
      : never
    : never]: never;
};
<%- `type ${global} = \n` + translationFilePaths.map(path => `TranslationPaths<typeof import("${path.replace(/\\/g, '\\\\')}")>`).join(' |\n')  %>

<% } %>

<% if (global) { %>
<%- `declare global {
  const ${global}: ${global}
}` 
%>
<% } %>


import * as i18next from "i18next";

declare module "i18next" {
  export interface TFunction {
    // basic usage
    <
      TResult extends i18next.TFunctionResult = string,
      TKeys extends <%- global %>,
      TInterpolationMap extends object = i18next.StringMap
    >(
      key: TKeys | TKeys[]
    ): TResult;
    <
      TResult extends TFunctionResult = TFunctionDetailedResult<object>,
      TKeys extends <%- global %>,
      TInterpolationMap extends object = StringMap
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> & {
        returnDetails: true;
        returnObjects: true;
      }
    ): TResult;
    <
      TResult extends TFunctionResult = TFunctionDetailedResult,
      TKeys extends <%- global %>,
      TInterpolationMap extends object = StringMap
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> & { returnDetails: true }
    ): TResult;
    <
      TResult extends TFunctionResult = object,
      TKeys extends <%- global %>,
      TInterpolationMap extends object = StringMap
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> & { returnObjects: true }
    ): TResult;
    <
      TResult extends TFunctionResult = string,
      TKeys extends <%- global %>,
      TInterpolationMap extends object = StringMap
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> | string
    ): TResult;
    // overloaded usage
    <
      TResult extends TFunctionResult = string,
      TKeys extends <%- global %>,
      TInterpolationMap extends object = StringMap
    >(
      key: TKeys | TKeys[],
      defaultValue?: string,
      options?: TOptions<TInterpolationMap> | string
    ): TResult;


    <% if(!strict) { %>
        // basic usage
    <
    // not strict mode, allow other string keys
      TResult extends TFunctionResult = string,
      TKeys extends TFunctionKeys = string,
      TInterpolationMap extends object = StringMap,
    >(
      key: TKeys | TKeys[],
    ): TResult;
    <
      TResult extends TFunctionResult = TFunctionDetailedResult<object>,
      TKeys extends TFunctionKeys = string,
      TInterpolationMap extends object = StringMap,
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> & { returnDetails: true; returnObjects: true },
    ): TResult;
    <
      TResult extends TFunctionResult = TFunctionDetailedResult,
      TKeys extends TFunctionKeys = string,
      TInterpolationMap extends object = StringMap,
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> & { returnDetails: true },
    ): TResult;
    <
      TResult extends TFunctionResult = object,
      TKeys extends TFunctionKeys = string,
      TInterpolationMap extends object = StringMap,
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> & { returnObjects: true },
    ): TResult;
    <
      TResult extends TFunctionResult = string,
      TKeys extends TFunctionKeys = string,
      TInterpolationMap extends object = StringMap,
    >(
      key: TKeys | TKeys[],
      options?: TOptions<TInterpolationMap> | string,
    ): TResult;
    // overloaded usage
    <
      TResult extends TFunctionResult = string,
      TKeys extends TFunctionKeys = string,
      TInterpolationMap extends object = StringMap,
    >(
      key: TKeys | TKeys[],
      defaultValue?: string,
      options?: TOptions<TInterpolationMap> | string,
    ): TResult;
    <% } %>
  }
}
